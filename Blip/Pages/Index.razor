@page "/"
@implements IAsyncDisposable

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Blip.Services
@using Chip;
@using Chip.Input
@using Chip.Output

@inject IJSRuntime JS
@inject Emulator ChipEmulator
@inject KeyMappingsService KeyMappingsService;

<PageTitle>Index</PageTitle>

<InputFile OnChange="@LoadFile" />

<BECanvas @ref="_canvasReference" Width="640" Height="320"></BECanvas>


@code {

  private DotNetObjectReference<Index>? _mainComponent;
  private IJSObjectReference? _module;
  private Canvas2DContext? _context;
  private Canvas2DRenderService? _canvas2DRenderService;
  private Timer? _timer;

  protected BECanvasComponent? _canvasReference;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    _mainComponent = DotNetObjectReference.Create(this);

    _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/input-bindings.js");
    await _module.InvokeVoidAsync("registerInputHandlers", _mainComponent);

    _context = await this._canvasReference.CreateCanvas2DAsync();
    _canvas2DRenderService = _canvas2DRenderService ?? new Canvas2DRenderService(_context);
    ChipEmulator.Renderer = _canvas2DRenderService;

    await _canvas2DRenderService.ClearScreenAsync();
  }

  [JSInvokable]
  public void OnDocumentKeyUp(string key)
  {
    Key? mappedKey = KeyMappingsService.GetKeyMapping(key);
    if (mappedKey != null)
    {
      ChipEmulator.Keypad.KeyUp(mappedKey.Value);
    }
  }

  [JSInvokable]
  public void OnDocumentKeyDown(string key)
  {
    Key? mappedKey = KeyMappingsService.GetKeyMapping(key);
    if (mappedKey != null)
    {
      ChipEmulator.Keypad.KeyDown(mappedKey.Value);
    }
  }

  private async void LoadFile(InputFileChangeEventArgs args)
  {
    _timer?.Dispose();

    await using MemoryStream ms = new();
    await args.File.OpenReadStream().CopyToAsync(ms);
    ChipEmulator.LoadProgram(ms.ToArray());

    _timer = new Timer(async _ =>
    {
      await ChipEmulator.ProcessNextMachineCycleAsync();
    }, null, 0, 1000 / 500);
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    _mainComponent?.Dispose();

    if (_module != null)
    {
      await _module.DisposeAsync();
    }
  }


}