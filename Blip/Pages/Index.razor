@page "/"
@implements IAsyncDisposable

@using Blip.Services
@using Chip
@using Chip.Input
@using Chip.Output
@using Blip.Pages.Components;

@inject IJSRuntime JS
@inject Emulator ChipEmulator
@inject KeyMappingsService KeyMappingsService;

<PageTitle>Chip-8 Emulator</PageTitle>

<canvas id="screen" />

<Container Fluid Class="keypad-container">
  <VisualKeypad />
</Container>

@code {

  private DotNetObjectReference<Index>? _mainComponent;
  private IJSObjectReference? _module;
  private Canvas2DRenderService? _canvas2DRenderService;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      _mainComponent = DotNetObjectReference.Create(this);

      _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/input-bindings.js");
      await _module.InvokeVoidAsync("registerInputHandlers", _mainComponent);

      _canvas2DRenderService = _canvas2DRenderService ?? new Canvas2DRenderService(JS);
      ChipEmulator.Renderer = _canvas2DRenderService;

      await _canvas2DRenderService.ClearScreenAsync();
    }
  }

  [JSInvokable]
  public void OnDocumentKeyUp(string key)
  {
    Key? mappedKey = KeyMappingsService.GetKeyMapping(key);
    if (mappedKey != null)
    {
      ChipEmulator.Keypad.KeyUp(mappedKey.Value);
    }
  }

  [JSInvokable]
  public async void OnDocumentKeyDown(string key)
  {
    Key? mappedKey = KeyMappingsService.GetKeyMapping(key);
    if (mappedKey != null)
    {
      await ChipEmulator.Keypad.KeyDownAsync(mappedKey.Value);
    }
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    _mainComponent?.Dispose();

    if (_module != null)
    {
      await _module.DisposeAsync();
    }
  }
}